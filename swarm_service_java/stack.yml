---

services:
  tomcat:
    image: formation.lan:443/stack-java-tomcat:1.0
    # build:
    #   # pas de cache pour vérifier que le Dockerfile est intègre
    #   # no_cache: true
    #   context: ./tomcat
    #   dockerfile: Dockerfile
    #  args:
    #    - TOMCAT_VERSION_MAJOR=${TOMCAT_VERSION_MAJOR:-9}
    #    - TOMCAT_VERSION_FULL=${TOMCAT_VERSION_FULL:-9.0.88}
    networks:
      stack_java:
        aliases:
          - stack-java-tomcat
      traefik-public:
        aliases:
          - stack-java-tomcat
    restart: unless-stopped
    labels:
      - author.username=mlamamra
      - author.email=mlamamra@dawan.fr
    # structure du service dans SWARM
    # &deploy-conf: référence en YAML
    deploy: &deploy-conf
      # la stratégie de découverte réseau pour trouver un ou plusieurs "tasks" du service
      endpoint_mode: vip # trouver une task
      # la stratégie de dissiménation des tasks  
      mode: replicated # dissiminer un nb de replicas où on peut
      replicas: 2
      # stratégie de redémmarage mais du service (pas des tasks)
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 2
      # gestion des rolling updates => mise à jour des conditions / critères de l'état des servies
      update_config:
        # nb de threads (parallélisme): on peut gérer les maj de chaque task  en //
        parallelism: 2
        

  
  httpd:
    # WARNING: pas de BUILD avec SWARM !
    image: formation.lan:443/stack-java-httpd:2.4
    ## avec le reverse proxy traefik on est plus obligé d'utiliser la publication directe des aoaches
    ## car traefik trouve une task du service httpd en 80 en interne sur le réseau traefik-public sur le 80 
    # ports:
    #   - 8081:80
    # 1. dans un dialecte YAML, on peut utiliser le polymorphisme
    # => le type de la valeur d'une clé peut être variable
    # ici networks peut être une liste ou un objet contenant des configs plus complexes
    networks: 
      stack_java:
        # on peut spécifier des aliases pour différencier le nom du service
        aliases:
          - stack-java-httpd
      traefik-public:
    depends_on:
      - tomcat
    labels:
      - author.username=mlamamra
      - author.email=mlamamra@dawan.fr
    # *deploy-conf : alias YAML, accroche le contenu de &deploy-conf
    # << : *deploy-conf: anchor YAML, accroche et redéfinit //
    deploy: 
      <<: *deploy-conf
      labels:
        # service observable par traefik
        - traefik.enable=true
        # spécifier le réseau pour la découverte
        - traefik.docker.network=traefik-public
        # pour le trafic lié à l'entrypoint (web définit dans le sercive traefik -> poirt 80 sur le cluster)
        - traefik.http.routers.httpd.entrypoints=web
        # règle d'url pour trouver le httpd
        - traefik.http.routers.httpd.rule=Host(`formation.lan`)
        # on va lb sur le réseau traefik-public -> http://formation.lan:8082/dashboard/#/http/services/httpd%40swarm
        - traefik.http.services.httpd.loadbalancer.server.port=80

    
        

networks:
  stack_java:
    name: stack_java
    driver: overlay
  registry:
    external: true
  traefik-public:
    external: true
    
    